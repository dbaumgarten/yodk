// this example shows the use of line-labels for gotos
// but be cautious when using goto. It is bad style, error prone and hinders optimization
:out="a"
// go to the line that is labeled with b>
goto b
// labels can be on the same line as a statement
c> :out+="c"
goto d
b> :out+="b"
goto c
d> // or on an own line. code automatically falls through empty lines

// you can use line-labels as (read-only) variables in calculations. They will have the line they end up in in the compiled yolol as value
:text="d is at line: "+d
:out+="d"; goto e

if :a==1 then
	// you can even jump into ifs
	e> :out+="e"
	// and out again
	goto f
end

// You can still use any expression for goto and calculate jumps.
// BUT BE CAREFUL! Using calculated jumps prevents the compiler from performing many optimizations
// and if you mess up, your jumps end up going whereever
f> :out+="f"; goto g+1
g> :out="skip this" $

:done=1
