package stdlib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _logic_nolol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\x4d\x6f\xdb\x3c\x0c\xbe\x07\xc8\x7f\x78\xde\xa0\x40\x93\x77\xc9\xdc\xec\xb8\x2e\x3b\xec\xd6\xeb\xd0\x9d\x0b\xc9\xa6\x6d\xa2\xb6\x68\x50\xd4\xd2\xfd\xfb\x41\x4a\x9a\xc6\x5d\x4f\x06\x4c\xea\xf9\x64\x55\xe1\xb1\xe7\x88\x96\x07\x42\x2d\xc1\x1c\x87\x08\xef\x22\xd7\x68\xa8\xe5\xc0\xc6\x12\x22\x5c\x68\x30\xba\x5a\x25\xa2\x15\xc5\x20\x1d\xd7\x3b\x99\x48\x5d\x99\x2f\x17\x55\x85\x87\x71\x12\x35\xa4\xc8\xa1\xc3\x2d\x38\xd4\x43\x6a\x08\xab\x68\x4d\x55\x1e\xac\x70\xbb\x5c\x94\xd5\x9f\x64\x49\x33\x2c\xb8\xcd\xb4\x4d\xa1\x01\x47\x98\x26\xda\x42\xac\x27\x3d\x72\x24\xf8\xb2\x7f\x59\xd9\xc2\x15\x2d\x1e\x63\x8a\x06\x4f\x08\x69\xf4\xa4\xf1\xf3\x15\xcc\xeb\xe8\x0e\xa2\xd8\x2f\x17\x45\xf8\x49\xf3\x93\x91\x06\xa7\x7f\xd6\xd7\x88\x5b\xf8\x0d\xe8\x65\xd2\xe5\x02\x00\x3c\x3e\x61\xed\x76\x7e\xf3\xff\x65\x69\xb9\xa0\xd0\x9c\xb5\x3f\xbc\x53\x7c\xb7\xc5\xa4\xd2\xa4\x9a\xb2\x1f\x4d\xc1\x78\xa4\x1d\xa9\x8a\xc2\x7a\x67\x38\xf2\x30\x20\x3e\xf3\x04\xeb\x09\x4a\xa3\xe3\x90\x23\x1a\x38\x50\x41\xfc\x15\x5d\x47\x5f\xb1\x3a\x29\xcc\x2d\x70\x48\xf4\x94\xe7\xeb\xdf\x4e\x37\xf7\x68\xe4\xb0\xbf\x47\xb4\xd4\xb6\x87\x2f\xb8\x59\x95\x67\x8f\x3d\xe1\x26\x2b\xe0\x12\xbc\x0b\x06\x13\x04\xb1\x33\x99\x08\xc6\x54\xf7\x73\xff\x73\xf4\x8b\x91\xcd\x37\xee\x82\x28\x7d\x3f\xab\xca\x39\x9c\xfe\x54\x87\x0f\x53\x78\x6d\x70\x9f\x1b\x74\x39\x68\xff\x56\x9f\x4f\x56\x74\x78\xb1\xbe\x6c\xbf\x2f\xed\xa3\x66\x5e\x44\xd7\x6e\x3b\x6b\xc2\xe1\xbf\x43\xbe\x80\x37\xda\x1f\x83\xd4\xcf\x11\x2e\x62\x90\xd0\xe5\xef\x3f\xd7\x33\x47\x3d\x3a\xb6\x2b\x9b\x57\xf6\x7a\xca\x76\x67\xf7\x67\x3d\x05\x74\x62\x52\x86\x28\xb4\x14\x9a\xbf\x01\x00\x00\xff\xff\xf8\x1b\xa7\xab\x25\x03\x00\x00")

func logic_nolol() ([]byte, error) {
	return bindata_read(
		_logic_nolol,
		"logic.nolol",
	)
}

var _math_advanced_nolol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\xcf\x4a\x03\x31\x10\x06\xf0\xb3\x81\xbc\xc3\x47\xa1\xb4\x05\x35\xf8\x18\x5e\xc5\x7b\x49\x37\xb3\xdd\x40\x32\xb3\x64\x66\x6b\x1e\x5f\xba\x56\xb0\xd8\xe3\xfc\xfb\x7d\x30\x21\xe0\x73\xca\x8a\x31\x17\xc2\x20\x6c\x31\xb3\xe2\x14\x35\x0f\x48\x34\x66\xce\x96\x85\x15\x91\x13\x6a\x1c\x9a\x28\x46\x69\xa8\xd1\x26\xef\x42\xc0\x7b\x9d\xa5\x19\x16\xcd\x7c\xc6\x0e\x99\x87\xb2\x24\xc2\x46\x2d\x85\xeb\xd2\x06\x3b\xef\xbc\xfb\xd7\x3f\xae\x11\x9b\xeb\x2c\x04\x7c\x90\x2d\x8d\x15\x36\x11\x98\xba\xa1\xc8\x17\x35\x64\x36\x3a\x53\x83\x09\xba\x77\x6b\xfc\x9a\x7c\x1c\x8b\x48\xdb\xf7\x03\xa8\xcf\xcd\xbb\xa7\xfe\xd2\xb7\x6f\xde\x11\xa7\x07\x60\x3c\xa9\x94\xc5\x08\x97\x58\x16\x82\x8c\xe8\xaf\x77\x5a\x3c\xe9\x1f\xeb\xa7\x7a\x84\xf5\x6d\xc5\x9e\x2e\xc4\x10\xbe\xbd\x68\x98\xf2\xac\x87\x3b\xad\x4a\xda\xf7\xe7\xfa\xeb\x01\x58\x0f\x6f\xe0\x77\x00\x00\x00\xff\xff\x41\x89\xb7\x37\x70\x01\x00\x00")

func math_advanced_nolol() ([]byte, error) {
	return bindata_read(
		_math_advanced_nolol,
		"math_advanced.nolol",
	)
}

var _math_basic_nolol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xdb\x3c\x10\xc4\xcf\x9f\x01\xbf\xc3\x20\x40\x10\xc9\x9f\x6c\x49\x6d\x81\xf6\x10\xe7\xd2\x53\x80\x9e\x8a\xdc\x0b\xca\x5a\x5a\x04\xc8\xa5\x40\xd2\x36\xfd\xf6\x05\x65\x3b\x11\xd1\xa6\xb9\xf8\x0f\xb1\x3b\xbf\x99\xe5\x4a\x75\x8d\x97\x41\x79\x48\xa5\x09\x3b\xcb\x41\x28\xf6\xe8\x84\x57\x3b\xf4\x24\x15\xab\xa0\x2c\x7b\x08\xee\x61\xc4\xce\x59\x0f\x69\x1d\x8c\x08\xc3\x72\x51\xd7\x78\x36\xa3\x75\x01\x07\xaf\x78\x8f\x07\x28\xde\xe9\x43\x4f\xb8\xf3\xa1\xaf\x53\xd1\x1d\x1e\x96\x8b\xa9\xf2\x65\xa0\xa9\x8d\x8c\x08\x6a\x27\x74\xa2\xf9\x20\x38\x60\x54\xcb\xc5\xc4\xba\x14\xfc\x1a\xd5\xf6\xf3\xa6\xfd\xd2\x7e\xd8\x48\x79\x1f\x6d\x3f\x6d\xbe\xb6\xdf\xae\x6d\x3f\x29\x1c\x1c\x7b\x84\x81\x20\x3a\x6f\xf5\x21\x10\x8e\x42\x1f\x08\x56\x22\x6e\x96\x8b\x29\xcf\xa5\x55\x74\xbe\x88\x25\x28\x8e\x6e\xb9\xf8\xaf\x88\x4f\xdb\xa6\x5c\xc5\x75\x11\x1f\xd3\xf7\x72\x41\xdc\x5f\x65\x9f\x25\x22\x94\xc7\x53\x53\xc1\x5d\x11\x2d\x94\xc4\x63\x73\xfd\x8f\x75\x5b\xc1\x86\x81\xdc\x49\x79\x7a\x2d\x6a\x32\xa0\x57\x7b\xfe\x83\x98\x78\xdb\xa6\x9c\xe3\xe6\x29\x98\x62\x80\xb6\x27\x72\x50\x1c\x68\x4f\x0e\xc1\x22\x66\xba\x52\x5b\xeb\x66\xc2\xb1\x6e\x9b\xa6\x59\xa5\x8f\xb9\xec\x0f\xc5\x24\x9c\x3e\x4f\x42\x6e\xb4\x5a\x04\xf2\xe8\x28\x9c\x88\x18\x62\xba\xee\x2e\xad\x01\xf5\xb0\x0c\x89\xa2\x6d\x9a\xfb\x34\x38\x81\xd3\x40\x0c\xb9\x6d\xa6\xa2\xdb\x71\x77\x3b\x6e\xcb\xcc\x8f\x26\x37\x16\xa2\x42\x57\x41\xde\x4c\x01\x40\x21\xb0\x42\xd1\x62\x0d\x59\x96\xf8\x1f\x45\x87\x15\x64\x16\xfd\x99\x8f\xe4\x3c\x41\x4f\x5e\x67\x4e\x95\xe5\x6c\x36\x02\x7c\x30\x1d\xb9\x57\xff\x57\x6b\x99\xff\x66\xd3\xdc\x2c\x5e\xe2\xb5\x6f\x07\x5d\xee\x59\xf1\xf1\x5d\xdb\x12\x6b\x88\x12\x75\x32\x9c\x7e\xfd\xed\xae\xe2\xbd\x41\x41\x47\xe2\x84\xbe\x3c\x4a\xbb\x41\x8d\x3e\xa7\x18\xdb\x17\xb1\x32\x73\xf5\xb8\x8e\xb5\x79\xbb\xb0\x95\x79\x6f\x13\xbc\x11\x5a\x93\xbb\xe5\x4e\xfb\x3c\x65\x3a\xe7\x04\xc5\x45\xac\x70\xce\x10\x69\xd6\xe7\x75\x2c\x57\x45\x7c\x3a\xbf\xbb\x6a\x5a\xb8\xfd\xc7\xfa\x22\xfe\x53\xff\x31\xd7\xff\xae\x85\x19\x3d\x62\x5a\xda\xc4\x70\x82\xf7\xd3\xb3\x68\x14\x5f\xdf\x2f\xf9\x2e\xef\x52\x43\x9a\x91\xe2\xca\x88\x38\xc7\xbc\xe6\x9b\x1b\x31\x8a\xcb\x2a\xa9\xdc\xb0\xbf\x03\x00\x00\xff\xff\x43\x12\x2e\x16\xdd\x04\x00\x00")

func math_basic_nolol() ([]byte, error) {
	return bindata_read(
		_math_basic_nolol,
		"math_basic.nolol",
	)
}

var _math_professional_nolol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xca\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\x52\xee\xf0\xd5\xa5\x63\xce\xc1\xce\x8e\x8c\x9d\x50\x4b\x8d\x8d\x62\x97\xf3\x23\x66\xd6\xa7\xd7\x1a\xee\x87\x06\x86\x9e\x1d\xec\x96\xa4\x16\x78\x52\x28\x43\xfa\x50\xd3\x54\xb7\x00\x99\x60\x12\x2f\x0f\x0c\x5f\x98\x94\x47\x2d\xad\xe1\x36\xdf\xbe\x12\x57\xa8\xbd\xb0\x43\x8d\xcf\x4b\x3a\xb6\x48\x69\xbf\xb4\x61\xaf\xa5\x96\x3f\x7f\x90\x7c\xc8\xb8\xcb\x56\xcb\x37\x00\x00\xff\xff\x96\xd3\x92\xd7\x84\x00\x00\x00")

func math_professional_nolol() ([]byte, error) {
	return bindata_read(
		_math_professional_nolol,
		"math_professional.nolol",
	)
}

var _string_nolol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3f\x6f\xd4\x40\x10\xc5\xeb\x58\xf2\x77\x78\x71\x13\x4e\x87\xb1\xa8\xc3\x21\x51\xd2\x22\x7a\xb4\xd8\x63\x7b\x24\x7b\x76\x35\x33\x8e\xee\xe3\xa3\x5d\xdf\x85\xe4\x74\x34\x94\x6f\xe7\xcf\xfb\xbd\x9d\xae\xc3\xcf\x99\x0d\x23\x2f\x84\x3e\x8a\x07\x16\xc3\xef\x60\xdc\x63\xa0\x91\x85\x9d\xa3\x18\x82\x0c\x58\x43\xaf\xd1\x30\x46\x85\xb9\xb2\x4c\xed\x1a\x84\xd3\xb6\x84\xdc\x53\x57\x5d\x87\xef\x6b\x8a\xea\xd8\x8c\x65\xc2\x13\x58\xfa\x65\x1b\x08\x8d\xf9\xd0\xed\x33\x0d\x9e\xea\xaa\xf4\xfe\xa0\x35\xbe\x90\xc1\x67\xc2\x12\xcc\xd1\xcf\x41\x43\xef\xa4\x18\x35\xae\xd9\xa3\xd8\xa6\x25\xf4\x64\x60\x07\x8b\x47\xc4\xcd\xeb\xaa\xa0\x5c\x28\x7e\xa5\x98\x3e\x98\xeb\xc7\x5c\x3a\x7c\xe1\x49\xa2\xd2\x57\x2c\x2c\x54\x57\x0f\xbb\x3c\x99\xeb\x73\xae\x9f\x76\xdd\x9a\x6b\xdb\xa2\xae\x48\x86\x57\x1c\xdf\x54\x0c\x9f\xc1\x63\xf1\x7e\xfd\x8d\xf3\x8d\xdf\xb5\xb0\x9b\x9e\x0f\xa0\x73\xd2\xba\x7a\xc8\xba\x3d\x1f\x1e\xb3\xd9\xdb\xcd\xdf\x86\xe1\x92\x92\x64\x9a\x1d\x71\xdf\x7f\xcd\xd2\x75\x45\xb2\xc1\xc8\xf3\x6b\xd3\x80\xa5\x0c\x24\x8d\x3d\x99\xdd\xf8\x2f\x24\x7f\xf3\x5e\x73\xce\x94\x43\xef\xe8\x8f\xa7\xa6\xc9\xf3\x82\x3d\x66\x49\x7e\x3c\xe2\x19\x53\xf4\x88\xdc\x8a\x82\xf7\x86\x31\x25\x92\x0b\xa6\xd2\x0b\xa9\xd1\x7b\xce\x4f\xff\x01\x7a\x59\xf4\xef\xe3\xdc\x87\xbe\x39\xd9\xf1\xfd\xcd\xee\x85\xf8\x13\x00\x00\xff\xff\x75\x1b\xad\x2f\xc6\x02\x00\x00")

func string_nolol() ([]byte, error) {
	return bindata_read(
		_string_nolol,
		"string.nolol",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"logic.nolol": logic_nolol,
	"math_advanced.nolol": math_advanced_nolol,
	"math_basic.nolol": math_basic_nolol,
	"math_professional.nolol": math_professional_nolol,
	"string.nolol": string_nolol,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"logic.nolol": &_bintree_t{logic_nolol, map[string]*_bintree_t{
	}},
	"math_advanced.nolol": &_bintree_t{math_advanced_nolol, map[string]*_bintree_t{
	}},
	"math_basic.nolol": &_bintree_t{math_basic_nolol, map[string]*_bintree_t{
	}},
	"math_professional.nolol": &_bintree_t{math_professional_nolol, map[string]*_bintree_t{
	}},
	"string.nolol": &_bintree_t{string_nolol, map[string]*_bintree_t{
	}},
}}
